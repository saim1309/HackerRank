using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the isValid function below.
    static string isValid(string s) {
        int totalCorrections = 0;
            int baseValue = 0;
            Dictionary<char, int> letterList = new Dictionary<char, int>();
            foreach (char letter in s)
            {
                if (letterList.ContainsKey(letter))
                {
                    letterList[letter]++;
                }
                else
                {
                    letterList.Add(letter, 1);
                }
            }
            var sortedList = letterList.ToList();
            //sortedList.Sort((val1, val2) => val1.Value.CompareTo(val2.Value));
            baseValue = sortedList[0].Value;
            for (int i = 0; i < sortedList.Count(); i++)
            {
                if (totalCorrections > 1)
                {
                    return "NO";
                }
                if ((i + 1 < sortedList.Count()) && baseValue != sortedList[i + 1].Value)
                {
                    totalCorrections++;
                }
            }
            return "YES";

    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string s = Console.ReadLine();

        string result = isValid(s);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
